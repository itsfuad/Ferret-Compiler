
import "myapp/cmd/types";

type Integer types::Int; // Integer is an alias for Int, which is an alias for i32

let myVar : Integer = 42; // myVar is of type Integer, which is an alias for i32

let expr : Integer = (10 + 22) * 3;

let myname : types::String = types::name; // name is of type String, which is an alias for str

let a: i32 = 10;
let b = 23.232;

let sum: f64 = a + b + types::sumOf4Int; // sum is inferred as f64

// //types::sumOf4Int;

let p = types::sumOf4Int; // p is inferred as i32

let x, y, z : i32; // all three variables are of type i32

let name, age, height : str, i32, f64 = "Alice", 25, 5.5; // multiple variable declaration with types

x = 10; // x is assigned an integer value
y = 20; // y is assigned another integer value
z = x + y; // z is assigned the sum of x and y

x, y, z = 1, 2, 3; // multiple assignment in a single line

let largeNumber: i64 = 1_000_000_000; // largeNumber is of type i64 with a value of 1 billion

largeNumber = 2**4;

x = largeNumber as i32; // narrowing cast - now allowed

fn add(a: i32, b: i32) -> i32 {
    return a + b; // returns the sum of a and b
}

fn multiply(a: i32, b: i32) -> i32 {
    return a * b; // returns the product of a and b
}

let result = 0;

sum, result = add(5, 10) as f64, multiply(2, 3); // calling functions and assigning results