let x: i32 = 42;
let y: i64 = x as i64;  // Valid cast: i32 -> i64 (widening)

// Test with literals  
let a: i64 = 100 as i64;
let b: f32 = 42 as f32;

// Valid narrowing casts from larger to smaller types
let big: i64 = 1000;
let medium: i32 = big as i32;  // Now valid - i64 to i32 narrowing with explicit cast

// Valid same-type cast (no-op)
let same: i32 = x as i32;

// More cast tests - all should be valid now
let small: i8 = medium as i8;   // i32 -> i8 (narrowing)
let tiny: u8 = big as u8;       // i64 -> u8 (narrowing)
let floating: f64 = x as f64;   // i32 -> f64 (widening)
let back_to_int: i16 = floating as i16;  // f64 -> i16 (narrowing)

// Invalid cast - should still fail
let s: str = "hello";
let invalid: i32 = s as i32;  // Should fail - str to i32 not allowed
